>> ĐỒ THỊ LIÊN THÔNG "QUA ĐẢO"
>> Có n hòn đảo và m cây cầu. Mỗi cây cầu bắt qua 2 hòn đảo.
   Một hôm chúa đảo tự hỏi là với các cây cầu hiện tại
   thì đứng ở một hòn đảo bất kỳ có thể nào đi đến được
   tất cả các hòn đảo khác hay không

>> Kiểm tra đồ thị có liên thông hay không
>> Duyệt đồ thị theo chiều rộng bằng đệ quy
>> Duyệt bắt đầu từ đỉnh 1 nếu sau khi chạy 1 lần duyệt
  mà duyệt được tất cả các đỉnh thì đồ thị liên thông

#include <stdio.h>

int mark[100];

// List
typedef struct {
    int data[100];
    int size;
} List;

void make_null_list(List* L) {
    L->size = 0;
}

void push_back(List* L, int x) {
    L->data[L->size] = x;
    ++L->size;
}

int element_at(List* L, int i) {
    return L->data[i - 1];
}

// Graph
typedef struct {
    int A[100][100];
    int n;
} Graph;

void init_graph(Graph* G, int n) {
    G->n = n;

    int i, j;

    for (i = 1; i <= n; ++i) {
        for (j = 1; j <= n; ++j) {
            G->A[i][j] = 0;
        }
    }
}

void add_egde(Graph* G, int x, int y) {
    G->A[x][y] = 1;
    G->A[y][x] = 1;
}

int adjacent(Graph* G, int x, int y) {
    return G->A[x][y];
}

List neighbors(Graph* G, int x) {
    int y;
    List list;

    make_null_list(&list);

    for (y = 1; y <= G->n; ++y) {
        if (adjacent(G, x, y)) {
            push_back(&list, y);
        }
    }

    return list;
}

void traversal(Graph* G, int x) {
    if (mark[x]) {
        return;
    }

    mark[x] = 1;

    List list = neighbors(G, x);

    int j;
    for (j = 1; j <= list.size; ++j) {
        int y = element_at(&list, j);
        traversal(G, y);
    }
}

int depth_first_search(Graph* G) {
    int i, ret = -1;

    for (i = 1; i <= G->n; ++i) {
        if (!mark[i]) {
            ++ret; // nếu nó liên thông thì chổ này bằng 0. ngược lại thì lớn hơn 0
            traversal(G, i);
        }
    }

    return !ret;
}

int main() {
    //freopen("dt.txt", "r", stdin);

    Graph G;
    int n, m, i, x, y;

    scanf("%d%d", &n, &m);

    init_graph(&G, n);

    for (i = 1; i <= m; ++i) {
        scanf("%d%d", &x, &y);

        add_egde(&G, x, y);
    }

    for (i = 1; i <= n; ++i) {
        mark[i] = 0;
    }

    if (depth_first_search(&G)) {
        printf("YES");
    } else {
        printf("NO");
    }

    return 0;
}